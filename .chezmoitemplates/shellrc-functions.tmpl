{{- /*
vim:ft=bash.gotexttmpl
*/ -}}

{{- if eq .chezmoi.os "darwin" }}
darkmode() {
	# shellcheck disable=SC2046,SC2145
	defaults write $(osascript -e 'id of app "'"$@"'"' | tr -d '\n' | tr -d '\r') NSRequiresAquaSystemAppearance -bool FALSE
	notify "Embrace the Dark Side, Luke" "Use your $@"
}

darkmodeoff() {
	# shellcheck disable=SC2046,SC2145
	defaults delete $(osascript -e 'id of app "'"$@"'"' | tr -d '\n' | tr -d '\r') NSRequiresAquaSystemAppearance
	notify "I felt a great disturbance in the Force" "Use your $@"
}

tn() {
	start_time=$(date +%s)
	"$@"
	end_time=$(date +%s)
	notify "Job is done, Sir!" "$@"
}

# Cleanup macOS drive snapshots
tm-cleanup() {
	tm_list=$(tmutil listlocalsnapshots / | awk -F '.' 'NF > 1 {print $4}')
	while IFS= read -r l; do
		sudo tmutil deletelocalsnapshots "$l"
	done <<<"$tm_list"
	notify "tmutil" "Snapshots deleted"
}

# Remove quarantine from executable binary
unquarantine() {
	xattr -r -d com.apple.quarantine "$@"
	notify "macOS quarantine removed" "$@"
}

# Codesign local app/binary
unosign() {
	codesign --remove-signature "$@"
	codesign --force --deep --sign - "$@"
	notify "macOS codesign added" "$@"
}
{{ end }}

ip-external() {
	ip=$(dig +short myip.opendns.com @resolver1.opendns.com)
	echo $ip
	notify "External IP" "$ip"
}

{{ if lookPath "limactl" }}
toolbox() {
	if [[ $(limactl list toolbox --format {{`'{{ .Status }}'`}}) == "Stopped" ]]; then
		limactl start toolbox
	fi 
	limactl shell --shell /bin/zsh toolbox
	echo "You left Toolbox Universei\n\n"
}
{{ end }}

f2iso() {
	if [[ -f "$(basename $@)".iso ]]; then
		rm -f "$(basename $@)".iso
	fi
{{- if eq .chezmoi.os "darwin" }}
	hdiutil makehybrid -iso -joliet -o "$(basename $@)".iso "$@" && \
{{- else if eq .chezmoi.os "linux" }}
	mkisofs -lJR -o "$(basename $@)".iso "$@" && \
{{- end }}
	notify "f2iso" "$(basename $@).iso image created"
}

{{ if lookPath "qemu-img" }}
qcow2vhd() {
	qemu-img convert -O vhdx -o subformat=fixed "$@" "$(basename $@)".vhd
	notify "qemu-img" "$(basename $@).vhd image converted"
}

raw2qcow2() {
	qemu-img convert -O qcow2 "$@" "$(basename $@)".qcow2
	notify "qemu-img" "$(basename $@).qcow2 image converted"
}
{{ end }}

{{ if lookPath "bat" }}
dbat() {
	if [ $# -eq 2 ]; then
		diff -t -y --color "$1" "$2" | bat -l rs
	else
		echo "bat diff function accepts two and only two arguments"
	fi
}

tfbat() {
	if [ $# -ge 1 ]; then
		tail -f "$@" | bat --paging=never -l log --style="grid"
	else
		echo "bat tail -f function requires at least one arguments"
	fi
}
{{ end }}

passgen() {
	if [ -n "$1" ]; then
		openssl rand -base64 "$1"
	else 
		openssl rand -base64 "14"
	fi
}

{{ if lookPath "yazi" }}
function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}
{{ end -}}

{{ if lookPath "mmdc" }}
mpng() {
	filename="$@"
	filename="${filename%.*}"
	if [ -f "$filename.mmd" ]; then
		mmdc -i "$filename.mmd" -o "$filename.png" -s 10
		notify "Mermaid Diagram Generated" "Open $filename.png"
	else
		echo "File $filename.mmd absent"
	fi
}
msvg() {
	filename="$@"
	filename="${filename%.*}"
	if [ -f "$filename.mmd" ]; then
		mmdc -i "$filename.mmd" -o "$filename.svg"
		notify "Mermaid Diagram Generated" "Open $filename.svg"
	else
		echo "File $filename.mmd absent"
	fi
}
mwatch() {
	filename="$@"
	filename="${filename%.*}"

	if [ -f "$filename.mmd" ]; then
		hash_current=0
		hash_new=0

		while true; do
			hash_new=$(md5 "$filename.mmd")
			if [[ $hash_new != $hash_current ]]; then
				mmdc -i "$filename.mmd" -o "$filename.png" -s 10 &&
					timg -p k "$filename.png"
				hash_current="$hash_new"
			fi
			sleep 5
		done
	else
		echo "File $filename.mmd absent"
	fi
}
{{ end -}}

{{- if lookPath "vagrant" }}
export VAGRANT_PROVIDER_GUI="false"
vagrant_ip() {
	vagrant ssh -c "ip address show eth0 | grep 'inet ' | sed -e 's/^.*inet //' -e 's/\/.*$//'"
}

vagrant_install_all_plugins() {
	vagrant plugin install vagrant-vbguest
}

vagrant_update_all_plugins() {
	for plugin in $(vagrant plugin list | cut -f1 -d' '); do
		vagrant plugin update "$plugin"
	done
}
{{- end }}
