{{- /*
vim:ft=bash.gotexttmpl
*/ -}}

{{ if eq .chezmoi.os "darwin" }}
	darkmode() {
		# shellcheck disable=SC2046,SC2145
		defaults write $(osascript -e 'id of app "'"$@"'"' | tr -d '\n' | tr -d '\r') NSRequiresAquaSystemAppearance -bool FALSE
		notify "Embrace the Dark Side, Luke" ""Use your $@"
	}

	darkmodeoff() {
		# shellcheck disable=SC2046,SC2145
		defaults delete $(osascript -e 'id of app "'"$@"'"' | tr -d '\n' | tr -d '\r') NSRequiresAquaSystemAppearance
		notify "I felt a great disturbance in the Force" ""Use your $@"
	}

	tn() {
		start_time=$(date +%s)
		"$@"
		end_time=$(date +%s)
		notify "Job is done, Sir!" "$@"
	}

	tm-cleanup() {
		tm_list=$(tmutil listlocalsnapshots / | awk -F '.' 'NF > 1 {print $4}')
		while IFS= read -r l; do
			sudo tmutil deletelocalsnapshots "$l"
		done <<<"$tm_list"
		notify "tmutil" "Snapshots deleted"
	}

	f2iso() {
		hdiutil makehybrid -iso -joliet -o "$(basename $@)".iso "$@" && \
		notify "hdutil" "$(basename $@).iso image created"
	}
{{ end }}

dbat() {
	if [ $# -eq 2 ]; then
		diff -t -y --color "$1" "$2" | bat -l rs
	else
		echo "bat diff function accepts two and only two arguments"
	fi
}

tfbat() {
	if [ $# -ge 1 ]; then
		tail -f "$@" | bat --paging=never -l log --style="grid"
	else
		echo "bat tail -f function requires at least one arguments"
	fi
}

ydl() {
	cd "$HOME"/Downloads || exit 1
	video_title=$(yt-dlp --skip-download --get-title --no-warnings "$@" | sed 2d)
	if yt-dlp -f 'bestvideo[height<=720]+bestaudio[ext=m4a]/best[height<=720]' --recode-video mp4 --audio-format m4a --merge-output-format mp4 "$@"; then
		notify "Video Download Finished" "$video_title"
	else
		notify "Video Download Failed" "$video_title"
	fi
}

ymdl() {
	cd "$HOME"/Downloads || exit 1
	video_title=$(yt-dlp --skip-download --get-title --no-warnings "$@" | sed 2d)
	if yt-dlp -x --audio-format m4a --embed-thumbnail "$@"; then
		notify "Video Download Finished" "$video_title"
	else
		notify "Video Download Failed" "$video_title"
	fi
}

passgen() {
	openssl rand -base64 "$1"
}

notify() {
	{{ if eq .chezmoi.os "darwin" -}}
		osascript -e "display notification \"$2\" with title \"$1\""
	{{- else if eq .chezmoi.os "linux" }}
		# Proper implementation required
		echo "$@"
	{{- end }}
}

stmux() { ssh "$@" -t sh -c '~/.homebrew/bin/tmux attach-session -dv'; }

export VAGRANT_PROVIDER_GUI="false"
vagrant_ip() {
	vagrant ssh -c "ip address show eth0 | grep 'inet ' | sed -e 's/^.*inet //' -e 's/\/.*$//'"
}
vagrant_install_all_plugins() {
	vagrant plugin install vagrant-vbguest
}
vagrant_update_all_plugins() {
	for plugin in $(vagrant plugin list | cut -f1 -d' '); do
		vagrant plugin update "$plugin"
	done
}
