## Shell

# Use zsh
set -g default-shell /bin/zsh

## Commands
# Use C-s as prefix
set -g prefix "C-s"
unbind-key "C-s"
bind-key "C-s" send-prefix

set -g mouse on

# Reload tmux file
bind-key -r "a" source-file $HOME/.config/tmux/tmux.conf \; display-message ' Config reloaded...'.

# Required for macOS (for 10.11 and early)
#if-shell 'test "$(uname)" = "Darwin" && type reattach-to-user-namespace' set -g default-command "reattach-to-user-namespace -l $SHELL"

# Autoinstall tpm and plugins
if-shell '[[ ! -d $HOME/.tmux/plugins/tpm ]]' {
  run-shell "git clone https://github.com/tmux-plugins/tpm $HOME/.tmux/plugins/tpm && $HOME/.tmux/plugins/tpm/bindings/install_plugins && tmux source-file $HOME/.config/tmux/tmux.conf"
}


## Configuration
# Address vim mode switching delay (http://superuser.com/a/252717/65504)
set -s escape-time 0

set -g default-terminal "xterm-256color"
set -g terminal-overrides 'xterm*:smcup@:rmcup@'
# set -sa terminal-overrides ",xterm-256color:Tc"

# Automatically set window title
set -g set-titles on
set -g set-titles-string '#{pane_current_path} - #{host}'

setw -g automatic-rename off
set -g renumber-windows on

# Set window notifications
setw -g monitor-activity on
set -g visual-activity on

# Set to scrolls Vim not tmux history with mouse
set -g terminal-overrides 'xterm*:smcup@:rmcup@'

# Scrollback buffer n lines
set -g history-limit 100000

# Messages are displayed for 4 seconds
set -g display-time 4000

# Start numbering at 1
set -g base-index 1
setw -g pane-base-index 1

set -g display-panes-time 3000

set -g focus-events on

# Rather than constraining window size to the maximum size of any client connected to the *session*, constrain window size to the maximum size of any client connected to *that window*.
setw -g aggressive-resize on

# Set Vi mode
setw -g mode-keys vi
setw -g status-keys vi


# Manage tmux sessions resurection
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session'
set -g @resurrect-processes 'ssh psql mysql sqlite3 man more less ansible-vault'

set -g @resurrect-save 'S'
set -g @resurrect-restore 'R'


# NeoVim, WezTerm, tmux integration and unification
version_pat='s/^tmux[^0-9]*([.0-9]+).*/\1/p'

is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n M-h if-shell "$is_vim" "send-keys M-h" "select-pane -L"
bind-key -n M-j if-shell "$is_vim" "send-keys M-j" "select-pane -D"
bind-key -n M-k if-shell "$is_vim" "send-keys M-k" "select-pane -U"
bind-key -n M-l if-shell "$is_vim" "send-keys M-l" "select-pane -R"
tmux_version="$(tmux -V | sed -En "$version_pat")"
setenv -g tmux_version "$tmux_version"

if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' "bind-key -n 'M-p' if-shell \"$is_vim\" 'send-keys M-p'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' "bind-key -n 'M-p' if-shell \"$is_vim\" 'send-keys M-p'  'select-pane -l'"

bind-key -T copy-mode-vi M-h select-pane -L
bind-key -T copy-mode-vi M-j select-pane -D
bind-key -T copy-mode-vi M-k select-pane -U
bind-key -T copy-mode-vi M-l select-pane -R
bind-key -T copy-mode-vi M-p select-pane -l


## Manage sessions
#bind C-s choose-session
unbind-key "Q"
bind-key "Q" confirm-before kill-session
# tmux-plugins/tmux-sessionist
# <prefix> + g - prompts for session name and switches to it. Performs 'kind-of' name completion.
# <prefix> + C (shift + c) - prompt for creating a new session by name.
# <prefix> + X (shift + x) - kill current session without detaching tmux.
# <prefix> + S (shift + s) - switches to the last session.
# <prefix> + $ - rename session
# The same as built-in prefix + L that everyone seems to override with some other binding.
# <prefix> + @ - promote current pane into a new session.
# Analogous to how prefix + ! breaks current pane to a new window.
# <prefix> + t<secondary-key> - join currently marked pane (prefix + m) to current session/window, and switch to it
# secondary-keys
#		h, -, ": join horizontally
#		v, |, %: join vertically
#		f, @: join full screen


## Manage Windows
# Create a window:
# <prefix> c          create a new window
# Switch between windows:
# <prefix> 1 ...      switch to window 1, ..., 9, 0
# <prefix> p          previous window
# <prefix> n          next window
# <prefix> l          ‘last’ (previously used) window
# <prefix> w          choose window from a list
# Switch between windows with a twist:
# <prefix> M-n        next window with a bell, activity or
# <prefix> M-p        previous such window
# Other:
# <prefix> ,          rename the current window
# <prefix> &          kill the current window


## Manage panes
# Kill pane
unbind-key "T"
bind-key "T" kill-pane -a

is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key -n "C-h" if-shell "$is_vim" 'send-keys C-h' { if -F '#{pane_at_left}' '' 'select-pane -L' }
bind-key -n "C-j" if-shell "$is_vim" 'send-keys C-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind-key -n "C-k" if-shell "$is_vim" 'send-keys C-k' { if -F '#{pane_at_top}' '' 'select-pane -U' }
bind-key -n "C-l" if-shell "$is_vim" 'send-keys C-l' { if -F '#{pane_at_right}' '' 'select-pane -R' }
bind-key -T copy-mode-vi "C-h" if -F '#{pane_at_left}' '' 'select-pane -L'
bind-key -T copy-mode-vi "C-j" if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind-key -T copy-mode-vi "C-k" if -F '#{pane_at_top}' '' 'select-pane -U'
bind-key -T copy-mode-vi "C-l" if -F '#{pane_at_right}' '' 'select-pane -R'
bind-key "h" select-pane -L
bind-key "j" select-pane -D
bind-key "k" select-pane -U
bind-key "l" select-pane -R

bind-key -r "H" resize-pane -L 5
bind-key -r "J" resize-pane -D 5
bind-key -r "K" resize-pane -U 5
bind-key -r "L" resize-pane -R 5

bind-key "|" split-window -h -c '#{pane_current_path}'
bind-key "\\" split-window -fh -c '#{pane_current_path}'
bind-key "-" split-window -v -c '#{pane_current_path}'
bind-key "_" split-window -fv -c '#{pane_current_path}'

bind-key ";" last-window

bind-key -r "<" swap-window -t -
bind-key -r ">" swap-window -t +

unbind-key "s"
bind-key "s" choose-tree

bind-key "c" new-window -c '#{pane_current_path}'

bind-key -r "z" resize-pane -y 40


## FZF
# https://github.com/sainnhe/tmux-fzf
# prefix + F: open fzf fuzzy search window
TMUX_FZF_ORDER='session|window|pane|command|keybinding'

# fzf text completion
# press tmux prefix + tab to start extrakto fuzzy find the text/path/url/line
# press tab to insert it to the current pane,
# enter to copy it to the clipboard,
# ctrl-o to open the path/url or
# ctrl-e to edit with $EDITOR
# ctrl-f cycle extract options between word, path/url, lines
# ctrl-g cycle extract area between recent, full, window recent, window full, custom


## Copycat
# prefix + / - regex search
# prefix + ctrl-f - simple file search
# prefix + ctrl-g - jumping over git status files (best used after git status command)
# prefix + alt-h - jumping over SHA-1/SHA-256 hashes (best used after git log command)
# prefix + ctrl-u - url search (http, ftp and git urls)
# prefix + ctrl-d - number search (mnemonic d, as digit)
# prefix + alt-i - ip address search

# n - jumps to the next match
# N - jumps to the previous match


## Fuzzback
set -g @fuzzback-popup 1
set -g @fuzzback-popup-size '90%'


## Copy and Paste
set -g @shell_mode 'vi'

bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle

# Copy to X11 clipboard
if-shell '[[ $(uname -s) = "Linux" ]]' {
  if-shell '[[ $(XDG_SESSION_TYPE) = wayland ]' {
    set -s copy-command 'wl-copy -n'
  } {
      set -s copy-command 'xclip'
    }
}

# Copy to macOS clipboard
if-shell '[[ $(uname -s) = "Darwin" ]' {
  set -s copy-command 'pbcopy'
}

# Buffers
bind-key "b" list-buffers  # list paste buffers
bind-key "p" paste-buffer  # paste from the top paste buffer
bind-key "P" choose-buffer # choose which buffer to paste from


## Themes
# Status update interval
set -g status-interval 5

# Pane
set -g pane-border-status top
set -g pane-border-style fg=colour7
set -g pane-active-border-style fg=colour4
set -g pane-border-format "#{pane_index} /#{pane_current_command} #{pane_current_path}"

# set -g window-style bg=$background
# set -g window-active-style bg=$background

# Window List
setw -g window-status-separator "  "
setw -g window-status-style fg=colour08,bg=default
setw -g window-status-current-style fg=colour4,bg=default
setw -g window-status-format "#I /#W"
setw -g window-status-current-format "#I /#W"

# Messages
set -g message-style fg=colour7
set -g message-command-style fg=colour7,bg=default

# Status
set -g status on
set -g status-justify left
set -g status-position bottom
set -g status-style fg=default,bg=default

set -g status-left-length 100
set -g status-right-length 200

time_format="%R"
date_format="%d/%m/%Y"

set -g status-left-style fg=colour7,bg=default
set -g status-left "#[fg=colour0,bg=colour4,bold] #S #[fg=colour4,bg=default,nobold,nounderscore,noitalics]  #[fg=colour3,bg=default]"

set -g status-right-style fg=colour7,bg=default
set -g status-right "#{prefix_highlight} #[fg=colour0,bg=default,nobold,nounderscore,noitalics] #(gitmux #{pane_current_path}) #[fg=colour0,bg=default,nobold,nounderscore,noitalics] #[fg=colour4,bg=colour0,nobold,nounderscore,noitalics] ${date_format} #[fg=colour0,bg=colour4,nounderscore,noitalics] ${time_format} "


## tmux plugins manager
# List of plugins
set -g @tpm_plugins '                \
  tmux-plugins/tpm                   \
  tmux-plugins/tmux-sessionist       \
  tmux-plugins/tmux-sensible         \
  tmux-plugins/tmux-copycat          \
  tmux-plugins/tmux-resurrect        \
  tmux-plugins/tmux-prefix-highlight \
	thuanOwa/tmux-fzf-session-switch   \
  roosta/tmux-fuzzback               \
'
# List of disabled plugins
#  tmux-plugins/tmux-battery         \
#  tmux-plugins/tmux-pain-control    \
#  stonevil/tmux-vm-status           \
#  stonevil/tmux-hostname-status     \
#  stonevil/tmux-wan-status          \
#  stonevil/tmux-lan-status          \

# Initializes TMUX plugin manager.
# Keep this line at the very bottom of tmux.conf.
run-shell '~/.tmux/plugins/tpm/tpm'
