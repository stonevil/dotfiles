{{- /*
	vim:ft=lua.gotexttmpl
*/ -}}

-- WezTerm
-- vim:ft=lua

local wezterm = require("wezterm")
local config = wezterm.config_builder()
local act = wezterm.action

local detect = require("utils.detect")

local tabline = wezterm.plugin.require("https://github.com/michaelbrusegard/tabline.wez")
local resurrect = wezterm.plugin.require("https://github.com/MLFlexer/resurrect.wezterm")

-- Schemas
local dark_scheme = wezterm.color.get_builtin_schemes()[{{ (print ( .tui.theme | title) " " ( .tui.themeVariant | title)) | quote }}]
local light_scheme = wezterm.color.get_builtin_schemes()["Catppuccin Latte"]
-- Override Dark Schema Background
dark_scheme.background = "#000000"

-- TODO add system appearance detect
local scheme_current = dark_scheme

-- resurrect.wezterm periodic save every 5 minutes
resurrect.periodic_save({
    interval_seconds = 300,
    save_tabs = true,
    save_windows = true,
    save_workspaces = true,
})

local function conditionalActivatePane(window, pane, pane_direction, vim_direction)
	if detect.vi(pane) then
		window:perform_action(
			-- This should match the keybinds you set in Neovim.
			act.SendKey({ key = vim_direction, mods = "META" }),
			pane
		)
	else
		window:perform_action(act.ActivatePaneDirection(pane_direction), pane)
	end
end

wezterm.on("ActivatePaneDirection-left", function(window, pane)
	conditionalActivatePane(window, pane, "Left", "LeftArrow")
end)
wezterm.on("ActivatePaneDirection-right", function(window, pane)
	conditionalActivatePane(window, pane, "Right", "RightArrow")
end)
wezterm.on("ActivatePaneDirection-up", function(window, pane)
	conditionalActivatePane(window, pane, "Up", "UpArrow")
end)
wezterm.on("ActivatePaneDirection-down", function(window, pane)
	conditionalActivatePane(window, pane, "Down", "DownArrow")
end)

tabline.setup({
	options = {
		icons_enabled = true,
		theme = scheme_current,
		tabs_enabled = true,
	},
	sections = {
		tabline_a = { "mode" },
		tabline_b = { "workspace" },
		tabline_c = { " " },
		tab_active = {
			"index",
			{ "parent", padding = 0 },
			"/",
			{ "cwd", padding = { left = 0, right = 1 } },
			{ "zoomed", padding = 0 },
		},
		tab_inactive = { "index", { "process", padding = { left = 0, right = 1 } } },

		tabline_x = { "" },
		tabline_y = { "datetime" },
		tabline_z = { "domain" },
	},
})

config = {
	default_prog = { '{{ .tui.shellPath }}', '--login' },
	window_close_confirmation = "NeverPrompt",
	exit_behavior = "Close",
	audible_bell = "Disabled",
	show_new_tab_button_in_tab_bar = false,
	hide_tab_bar_if_only_one_tab = false,
	use_fancy_tab_bar = false,
	tab_bar_at_bottom = false,

	window_padding = {
		left = "1cell",
		right = "1cell",
		top = "0.5cell",
		bottom = "0.5cell",
	},
	window_frame = {
		font = wezterm.font({
			family = {{ .terminal.font | quote }},
		}),
		font_size = {{ .terminal.fontSize }},
		-- active_titlebar_bg = "#000000",
		-- inactive_titlebar_bg = "#000000",
	},
	window_background_opacity = {{ .terminal.opacity }},
	macos_window_background_blur = {{ .terminal.blur }},
	window_decorations = "RESIZE",
	enable_scroll_bar = false,
	text_blink_rate = 0,
	native_macos_fullscreen_mode = true,
	quit_when_all_windows_are_closed = true,
	enable_wayland = detect.wayland(),
	initial_cols = {{ .terminal.cols }},
	initial_rows = {{ .terminal.rows }},
	inactive_pane_hsb = {
		saturation = 0.3,
		brightness = 0.3,
	},
	font = wezterm.font({{ .terminal.font | quote }}),
	font_size = {{ .terminal.fontSize }},
	max_fps = 120,
	line_height = 1.1,
	-- Cursor style
	default_cursor_style = "BlinkingBlock",
	check_for_updates = true,
	-- check_for_updates_interval_seconds = 86400,
	disable_default_key_bindings = true,
	pane_focus_follows_mouse = false,
	send_composed_key_when_left_alt_is_pressed = true,
	send_composed_key_when_right_alt_is_pressed = false,
	key_map_preference = "Physical",
}

config.keys = {
	{ key = "mapped:#", mods = "META", action = "DisableDefaultAssignment" },
	{ key = "mapped:≠", mods = "META", action = "DisableDefaultAssignment" },
	{ key = "mapped:€", mods = "META", action = "DisableDefaultAssignment" },
	{ key = "mapped:´", mods = "META", action = "DisableDefaultAssignment" },
	{ key = "mapped:…", mods = "META", action = "DisableDefaultAssignment" },
	{ key = "mapped:≈", mods = "META", action = "DisableDefaultAssignment" },
	{ key = "q", mods = "SUPER", action = "QuitApplication" },
	{ key = "w", mods = "SUPER", action = wezterm.action({ CloseCurrentTab = { confirm = true } }) },
	{ key = "t", mods = "SUPER", action = wezterm.action({ SpawnTab = "CurrentPaneDomain" }) },
	{ key = "}", mods = "SUPER|SHIFT", action = wezterm.action({ ActivateTabRelative = 1 }) },
	{ key = "{", mods = "SUPER|SHIFT", action = wezterm.action({ ActivateTabRelative = -1 }) },
	{ key = "f", mods = "SUPER|CTRL", action = wezterm.action.ToggleFullScreen },
	{ key = "m", mods = "SUPER", action = wezterm.action.Hide },
	{ key = "h", mods = "SUPER", action = wezterm.action.HideApplication },
	{
		key = "\\",
		mods = "META",
		action = wezterm.action({
			SplitHorizontal = { domain = "CurrentPaneDomain" },
		}),
	},
	{
		key = "-",
		mods = "META",
		action = wezterm.action({
			SplitVertical = { domain = "CurrentPaneDomain" },
		}),
	},
	{
		key = "w",
		mods = "META",
		action = wezterm.action({ CloseCurrentPane = { confirm = false } }),
	},
	{
		key = "t",
		mods = "META|SUPER",
		action = wezterm.action_callback(function(_, pane)
			local _, _ = pane:move_to_new_tab()
		end),
	},
	{ key = "LeftArrow", mods = "META|SHIFT", action = wezterm.action.AdjustPaneSize({ "Left", 1 }) },
	{ key = "DownArrow", mods = "META|SHIFT", action = wezterm.action.AdjustPaneSize({ "Down", 1 }) },
	{ key = "UpArrow", mods = "META|SHIFT", action = wezterm.action.AdjustPaneSize({ "Up", 1 }) },
	{ key = "RightArrow", mods = "META|SHIFT", action = wezterm.action.AdjustPaneSize({ "Right", 1 }) },
	{ key = "LeftArrow", mods = "META", action = act.EmitEvent("ActivatePaneDirection-left") },
	{ key = "RightArrow", mods = "META", action = act.EmitEvent("ActivatePaneDirection-right") },
	{ key = "UpArrow", mods = "META", action = act.EmitEvent("ActivatePaneDirection-up") },
	{ key = "DownArrow", mods = "META", action = act.EmitEvent("ActivatePaneDirection-down") },

	{ key = 'p', mods = 'SUPER', action = wezterm.action.ActivateCommandPalette },

	{
		key = "f",
		mods = "SUPER",
		action = wezterm.action.ShowLauncherArgs({ flags = "FUZZY|TABS", title = "LAUNCHER" }),
	},

	{ key = "s", mods = "SUPER", action = wezterm.action.QuickSelect },
	{ key = "d", mods = "SUPER|SHIFT", action = wezterm.action.ShowDebugOverlay },
	{ key = "\\", mods = "SUPER", action = act.PaneSelect({ alphabet = "1234567890" }) },
	{ key = "z", mods = "META|SHIFT", action = wezterm.action.TogglePaneZoomState },
	{ key = "l", mods = "META|SHIFT", action = wezterm.action.ActivateLastTab },
	{ key = "?", mods = "META|SHIFT", action = wezterm.action.ActivateCopyMode },
	{ key = "0", mods = "SUPER", action = wezterm.action.ResetFontSize },
	{ key = "=", mods = "SUPER", action = wezterm.action.IncreaseFontSize },
	{ key = "-", mods = "SUPER", action = wezterm.action.DecreaseFontSize },
	{ key = "v", mods = "SUPER", action = act.PasteFrom("Clipboard") },
	{ key = "c", mods = "SUPER", action = wezterm.action.CopyTo("ClipboardAndPrimarySelection") },

	{
		key = "s",
		mods = "META|SUPER",
		action = wezterm.action_callback(function(win, pane)
				resurrect.save_state(resurrect.workspace_state.get_workspace_state())
				resurrect.window_state.save_window_action()
			end),
	},

	{
		key = "r",
		mods = "META|SUPER",
		action = wezterm.action_callback(function(win, pane)
			resurrect.fuzzy_load(win, pane, function(id, label)
				local type = string.match(id, "^([^/]+)")
				id = string.match(id, "([^/]+)$")
				id = string.match(id, "(.+)%..+$")
				local opts = {
					relative = true,
					restore_text = true,
					on_pane_restore = resurrect.tab_state.default_on_pane_restore,
				}
				if type == "workspace" then
					local state = resurrect.load_state(id, "workspace")
					resurrect.workspace_state.restore_workspace(state, opts)
				elseif type == "window" then
					local state = resurrect.load_state(id, "window")
					resurrect.window_state.restore_window(pane:window(), state, opts)
				elseif type == "tab" then
					local state = resurrect.load_state(id, "tab")
					resurrect.tab_state.restore_tab(pane:tab(), state, opts)
				end
			end)
		end),
	},
}

config.mouse_bindings = {
	{
		event = { Up = { streak = 1, button = "Left" } },
		mods = "SUPER",
		action = wezterm.action.OpenLinkAtMouseCursor,
	},
}

config.color_schemes = {
	["My Light Scheme"] = light_scheme,
	["My Dark Scheme"] = dark_scheme,
}

-- this scheme becomes default
config.color_scheme = "My Dark Scheme"

return config
