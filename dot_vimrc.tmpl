{{- /*
vim:ft=vim.gotexttmpl
*/ -}}

if 0 | endif

let vimplug_exists=expand($HOME . '/.vim/autoload/plug.vim')

function! InstallPlug(plugpath)
	if !filereadable(a:plugpath)
		if !executable("curl")
			echoerr "You have to install curl or first install vim-plug yourself!"
			execute "q!"
		endif
		echo 'Installing vim-plug...'
		execute '!curl -fL --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim -o ' . a:plugpath
		autocmd VimEnter * PlugInstall
	endif
endfunction

" :PlugInstall [name ...] [#threads]	- Install plugins
" :PlugUpdate [name ...] [#threads]		- Install or update plugins
" :PlugClean[!]												- Remove unused directories (bang version will clean without prompt)
" :PlugUpgrade												- Upgrade vim-plug itself
" :PlugStatus													- Check the status of plugins
" :PlugDiff														- Examine changes from the previous update and the pending changes
" :PlugSnapshot[!] [output path]			- Generate script for restoring the current snapshot of the plugins

call InstallPlug(vimplug_exists)

"" Install vim-plug if required
"" Required:
call plug#begin()
	Plug 'danilo-augusto/vim-afterglow'

	Plug 'bling/vim-airline'

	" FZF
	if !isdirectory($HOME . '/.homebrew/opt/fzf')
		Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
	else
		Plug $HOME . '/.homebrew/opt/fzf'
	endif
	Plug 'junegunn/fzf.vim'

	" Git Integration
	Plug 'tpope/vim-fugitive'

	" Comment stuff out. Use gcc to comment out a line (takes a count), gc to comment out the target of a motion
	Plug 'scrooloose/nerdcommenter'

	" Displaying thin vertical lines at each indentation level for code indented with spaces
	Plug 'Yggdroot/indentLine'

	" Provides insert mode auto-completion for quotes, parens, brackets
	Plug 'jiangmiao/auto-pairs'

	" Polyglot
	Plug 'sheerun/vim-polyglot'

	" Asynchronous linting/fixing for Vim and Language Server Protocol (LSP) integration
	Plug 'dense-analysis/ale'
call plug#end()


"" Global settings override
nnoremap <space> <nop>
map <space> <leader>
set guioptions=

" http://stackoverflow.com/questions/20186975/vim-mac-how-to-copy-to-clipboard-without-pbcopy
{{ if eq .chezmoi.os "darwin" }}
set clipboard^=unnamed
{{ else }}
set clipboard^=unnamedplus
{{- end  }}

set nocompatible								" Enables us Vim specific features
syntax on												" Enable syntax highlighting
filetype off										" Reset filetype detection first ...
filetype plugin indent on				" ... and enable filetype detection

set ttyfast											" Indicate fast terminal conn for faster redraw
set mouse=a											" Enable proper mouse selection

set history=1000
set undolevels=1000

set shell={{ .tui.shellPath }}

set encoding=utf-8							" Set default encoding to UTF-8
set fileencoding=utf-8
set fileencodings=utf-8
scriptencoding utf-8

set autoread										" Automatically read changed files
set autowrite										" Automatically save before :next, :make etc.
set noswapfile									" Don't use swapfile
set nobackup										" Don't create annoying backup files
set fileformats=unix,dos,mac		" Prefer Unix over Windows over OS 9 formats

set wildignore+=*.bak,.hg,*.swp,__pycache__
set wildignore+=*/tmp/*,*.so,*.pyc,*.png,*.jpg,*.gif,*.jpeg,*.ico,*.pdf
set wildignore+=*.wav,*.mp4,*.mp3
set wildignore+=*.o,*.out,*.obj,.git,*.rbc,*.rbo,*.class,.svn,*.gem
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*/vendor/gems/*,*/vendor/cache/*,*/.bundle/*,*/.sass-cache/*
set wildignore+=*.swp,*~,._*
set wildignore+=_pycache_,.DS_Store,.vscode,.localized
set wildignore+=.cache,node_modules,package-lock.json,yarn.lock,dist,.git

set autoindent									" Enabile Autoindent
set shiftround									" Round indent to multiple of 'shiftwidth'. Applies to > and < commands.
set noexpandtab ci pi sts={{ .tui.tabs }} ts={{ .tui.tabs }} sw={{ .tui.tabs }}
set wrap linebreak nolist				" Word wrap without line breaks
set backspace=indent,eol,start	" Makes backspace key more powerful.

set showtabline=2								" Always show tabline
set laststatus=2								" Show status line always
set scrolloff=4									" Keep 4 lines above or below the cursor when scrolling

set incsearch										" Shows the match while typing
set hlsearch										" Highlight found searches
set ignorecase									" Search case insensitive...
set smartcase										" ... but not it begins with upper case

set noerrorbells								" No beeps
set visualbell									" At times when a beep would have occurred, the screen will flash instead
set number											" Show line numbers
set showcmd											" Show me what I'm typing
set splitright									" Vertical windows should be split to right
set splitbelow									" Horizontal windows should split to bottom

set hidden											" Buffer should still exist if window is closed
set updatetime=300							" Smaller updatetime for CursorHold & CursorHoldI
set shortmess+=c								" Don't give |ins-completion-menu| messages
set signcolumn=yes							" Always show signcolumns
set showmatch										" Show matching brackets by flickering
set noshowmode									" We show the mode with airline or lightline
set completeopt=noinsert,longest,menuone,noselect
set pumheight=10								" Completion window max size
set nocursorcolumn							" Do not highlight column (speeds up highlighting)
set cursorline									" Highlight current line
set lazyredraw									" Wait to redraw

set confirm											" Confirm changes (Yes, No, Cancel) instead of error

"set wildmenu										" Visual autocomplete for command menu. Done by airline
"set wildmode=list:longest,full

" Turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>
" Create new buffer
nnoremap <leader>N :exec &nu==&rnu? "se nu!" : "se rnu!"<CR>


""""""""""
"" Configuration groups
augroup tmuxfile
	autocmd!
	autocmd BufRead,BufNewFile tmux.conf set filetype=tmux
augroup END

augroup sshconfig
	autocmd!
	autocmd BufRead,BufNewFile *.sshconfig set syntax=sshconfig
augroup END

augroup k8sfile
	autocmd!
	autocmd BufRead,BufNewFile */.kube/config set filetype=yaml
	autocmd BufRead,BufNewFile */templates/*.yaml,*/deployment/*.yaml,*/templates/*.tpl,*/deployment/*.tpl set filetype=yaml.gotexttmpl
augroup END

augroup markdownfile
	autocmd!
	autocmd BufRead,BufNewFile *.markdown,*.mdown,*.mkdn,*.mkd,*.md,*.mdwn set filetype=markdown
augroup END

augroup ansiblefile
	autocmd BufRead,BufNewFile */playbooks/*.yml set filetype=yaml.ansible
augroup END


""""""""""
"" ansible-vim
let g:ansible_unindent_after_newline = 1
"let g:ansible_attribute_highlight = 'ab'
let g:ansible_template_syntaxes = { '*.rb.j2': 'ruby' }
let g:ansible_extra_keywords_highlight = 1
let g:ansible_name_highlight = 'd'


""""""""""
"" thaerkh/vim-indentguides
let g:indentguides_firstlevel = 1
let g:indentguides_ignorelist = ['text', 'rmd', 'markdown', 'tex', 'rmarkdown', 'pandoc', 'nerdtree']
let g:indentguides_spacechar = '¦'
let g:indentguides_tabchar = '¦'
"let g:indentguides_conceal_color = 'ctermfg=238 ctermbg=234 guifg=#4e4e4e guibg=NONE'


""""""""""
"" junegunn/fzf.vim
" Search files
nnoremap <silent> <leader>e :Files<CR>
nnoremap <silent> <leader>ee :History<CR>

" Search in git files
nnoremap <silent> <leader>g :GFiles<CR>
nnoremap <silent> <leader>gf :GFiles?<CR>

" Search in git commits
nnoremap <silent> <leader>bc :BCommits<CR>
nnoremap <silent> <leader>gc :Commits<CR>

" Search buffers
nnoremap <silent> <leader><leader> :Buffers<CR>

" Search windows
nnoremap <silent> <leader><leader><leader> :Windows<CR>

" Search mapps
nnoremap <silent> <leader>mm :Maps<CR>

" Search for marked lines
nnoremap <silent> <leader>` :Marks<CR>

" Search for ctags
nnoremap <silent> <leader>`` :BTags<CR>
nnoremap <silent> <leader>``` :Tags<CR>

" Search for lines in buffers
nnoremap <silent> <leader>f :BLines<CR>
nnoremap <silent> <leader>ff :Lines<CR>

" Search command and command history
nnoremap <silent> <leader>co :Commands<CR>
nnoremap <silent> <leader>ch :History:<CR>

" Search in search history
nnoremap <silent> <leader>sh :History/<CR>

" Search in snippets
nnoremap <silent> <leader>ss :Snippets<CR>

" Search in filetypes
nnoremap <silent> <leader>ft ::Filetypes<CR>

" Search with Ag
nnoremap <silent> <leader>ag :Ag<CR>

" Search with Rg
nnoremap <silent> <leader>rg :Rg<CR>

"" fzf layout: - down / up / left / right
"let g:fzf_layout = { 'down': '80%' }
"" Always enable preview window on the right with 60% width
let g:fzf_preview_window = 'down:50%'

" fzf layout
let g:fzf_layout = { 'window': { 'width': 1, 'height': 0.8, 'yoffset': 1, 'border': 'top' } }
" Customize fzf colors to match your color scheme
let g:fzf_colors = {
	\ 'fg':      ['fg', 'Normal'],
	\ 'bg':      ['bg', 'Normal'],
	\ 'hl':      ['fg', "IncSearch"],
	\ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
	\ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
	\ 'hl+':     ['fg', 'Label'],
	\ 'info':    ['fg', 'Comment'],
	\ 'border':  ['fg', 'Identifier'],
	\ 'prompt':  ['fg', 'Statement'],
	\ 'pointer': ['fg', 'Statement'],
	\ 'marker':  ['fg', 'Conditional'],
	\ 'spinner': ['fg', 'Label'],
	\ 'header':  ['fg', 'Comment'] }

" Hide statusline
autocmd! FileType fzf set laststatus=0 noshowmode noruler | autocmd BufLeave <buffer> set laststatus=2 showmode ruler

" History directory
let g:fzf_history_dir = $HOME . '/.local/share/fzf-history'

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1
" [[B]Commits] Customize the options used by 'git log':
let g:fzf_commits_log_options = '--graph --color=always --format="%C(yellow)%h%C(red)%d%C(reset) - %C(bold green)(%ar)%C(reset) %s %C(blue)<%an>%C(reset)"'
" [Tags] Command to generate tags file
let g:fzf_tags_command = 'ctags -R'
" [Commands] --expect expression for directly executing the command
let g:fzf_commands_expect = 'alt-enter,ctrl-x'

" Command for git grep
if executable('git')
	command! -bang -nargs=* GGrep call fzf#vim#grep('git grep --line-number '.shellescape(<q-args>), 0, { 'dir': systemlist('git rev-parse --show-toplevel')[0] }, <bang>0)
endif

" Command for string search
if executable('rg')
	command! -bang -nargs=* Find call fzf#vim#grep('rg --no-ignore --hidden --follow --ignore-case --column --no-heading --line-number --color=always --glob "!.git/*" --glob "!.svn/*" --glob "!node_modules/*" --glob "!.undodir/*" --glob "!.session.vim" '.shellescape(<q-args>), 1, fzf#vim#with_preview(), <bang>0)
endif


""""""""""
"" vim-airline
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#csv#enabled = 1
"let g:airline#extensions#tagbar#enabled = 1
let g:airline#extensions#branch#enabled = 1

let g:airline#extensions#tabline#formatter = 'unique_tail_improved'

let g:airline#extensions#tmuxline#enabled = 0
let g:tmuxline_powerline_separators = 0
"let airline#extensions#tmuxline#snapshot_file = $HOME . '/.local/share/tmux.theme'


""""""""""
"" nerdcommenter
let g:NERDDefaultAlign = 'left'
let g:NERDCompactSexyComs = 1
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1
"let g:NERDToggleCheckAllLines = 1

" Comment out the current line or text selected in visual mode
" [count]<leader>cc
" Toggles the comment state of the selected line(s). If the topmost selected line is commented, all selected lines are uncommented and vice versa
" [count]<leader>c<space>
" Adds comment delimiters to the end of line and goes into insert mode between them
" <leader>cA
" Uncomments the selected line(s)
" [count]<leader>cu


""""""""""
"" tpope/vim-fugitive
" https://github.com/tpope/vim-fugitive/blob/master/doc/fugitive.txt
" Write to the current file's path and stage the results. When run in a work tree file, it is effectively git add. Elsewhere, it is effectively git-checkout. A great deal of effort is expended to behave sensibly when the work tree or index version of the file is open in another buffer.
noremap <leader>gpu :Git push<CR>
noremap <leader>gpl :Git pull<CR>

noremap <leader>gdf :Gvdiffsplit<CR>
noremap <leader>ggr :Ggrep<CR>

" Press - to add/reset a file's changes, or p to add/reset --patch.
noremap <leader>gst :Git<CR>
noremap <leader>gad :Gwrite<CR>
noremap <leader>gco :Git commit<CR>

noremap <leader>gbl :Git_blame<CR>

noremap <leader>gre :GRename<CR>
noremap <leader>gmv :GMove<CR>
noremap <leader>grm :GDelete<CR>


""""""""""
"" dense-analysis/ale
" Recommended for macOS
let g:delve_backend = "native"
" Enable integration with airline.
let g:airline#extensions#ale#enabled = 1
let g:ale_echo_msg_format = '[%code%] %s [%severity%]'
let g:ale_ansible_ansible_lint_executable = 'ansible-lint -x ANSIBLE0204'
let g:ale_yaml_yamllint_options='-d "{extends: relaxed, rules: {line-length: disable}}"'
let g:ale_set_signs = 1
let g:delve_enable_syntax_highlighting = 1
let g:delve_new_command = "new"

" Hover window support
let g:ale_set_balloons = 0

let g:ale_set_loclist = 0
let g:ale_set_quickfix = 1

let g:ale_fixers = { '*': ['trim_whitespace', 'remove_trailing_lines'], 'javascript': ['prettier', 'eslint'], 'css' : ['prettier'], 'html' : ['prettier'], 'markdown' : ['prettier'], 'json': ['prettier'], 'sh': ['shfmt'], 'yaml': ['prettier'], 'c' : ['clang-format'], 'cpp' : ['clang-format'], 'python' : ['black'], 'go': ['gofmt'] }

let g:ale_lint_on_enter = 0
let g:ale_fix_on_save = 1
let g:ale_lint_on_text_changed = 'never'

nmap <silent> <leader>[g <Plug>(ale_previous_wrap)
nmap <silent> <leader>]g <Plug>(ale_next_wrap)


""""""""""
"" Abbreviations
cnoreabbrev W! w!
cnoreabbrev Q! q!
cnoreabbrev Qall! qall!
cnoreabbrev Wq wq
cnoreabbrev Wa wa
cnoreabbrev wQ wq
cnoreabbrev WQ wq
cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev Qall qall

"" Copy/Paste
noremap YY "+y<CR>
noremap <leader>p "+gP<CR>
noremap XX "+x<CR>

set pastetoggle=<F1>

"" Manage splits
" Create a vertical split using :vsp and horizontal with :sp
" Max out the height of the current split
" ctrl+w _
" Max out the width of the current split
" ctrl+w |
" Normalize all split sizes, which is very handy when resizing terminal
" ctrl+w =
" Swap top/bottom or left/right split
" ctrl+w R
" Break out current window into a new tabview
" ctrl+w T
" Close every window in the current tabview but the current one
" ctrl+w o

"" Manage buffers
" Buffer nav
noremap <leader>q :bp<CR>
noremap <leader>w :bn<CR>
" New buffer
noremap <leader>N :enew<CR>
" Close buffer
noremap <leader>c :bd<CR>
noremap <leader>c! :bd!<CR>
" Switch to last-active buffer
nnoremap <leader>l <C-^>

" :bd          - deletes the current buffer, error if there are unwritten changes
" :bd!         - deletes the current buffer, no error if unwritten changes
" :bufdo bd    - deletes all buffers, stops at first error (unwritten changes)
" :bufdo! bd   - deletes all buffers except those with unwritten changes
" :bufdo! bd!  - deletes all buffers, no error on any unwritten changes

" :bw          - completely deletes the current buffer, error if there are unwritten changes
" :bw!         - completely deletes the current buffer, no error if unwritten changes
" :bufdo bw    - completely deletes all buffers, stops at first error (unwritten changes)
" :bufdo! bw   - completely deletes all buffers except those with unwritten changes
" :bufdo! bw!  - completely deletes all buffers, no error on any unwritten changes

" :ls          - list open buffers
" :b N         - open buffer number N (as shown in ls)
" :tabe +Nbuf  - open buffer number N in new tab
" :bnext       - go to the next buffer (:bn also)
" :bprevious   - go to the previous buffer (:bp also)


"" Clean search (highlight)
nnoremap <silent> <leader><space> :noh<cr>

"" Move visual block
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv


""""""""""
"" Theme
set t_Co=256
colorscheme afterglow
let g:airline_theme='afterglow'

set colorcolumn=0
set background=dark
silent do ColorScheme

" Set background to transparent
hi NonText ctermbg=none
hi Normal guibg=NONE ctermbg=NONE

""""""""""
"" Reopen last position
if has('autocmd')
	autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif
